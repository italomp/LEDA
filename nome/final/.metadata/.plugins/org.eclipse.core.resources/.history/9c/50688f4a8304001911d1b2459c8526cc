package adt.linkedList.extended;

import adt.linkedList.SingleLinkedListImpl;
import adt.linkedList.SingleLinkedListNode;

public class ListInversionImpl extends SingleLinkedListImpl<Integer> implements ListInversion<Integer> {

	@Override
	public  void reverseIterative() {
		SingleLinkedListNode<Integer> node = getHead();
		Integer previous = getHead().getData();
		Integer next = getHead().getNext().getData();
		
		while(!node.isNIL()) {
			node.setData(next);
			node.getNext().setData(previous);
			
			previous = node.getNext().getData();
			next = node.getNext().getNext().getData();
			node = node.getNext();
		}
	}
	
	@Override
	public void reverseRecursive() {
		//TODO Implement your code here
		throw new UnsupportedOperationException("Not implemented yet!");
	}
	

	//NAO ALTERE NADA NESTE METODO. ELE SERA UTIL QUANDO VOCE QUISER TESTAR SUA IMPLEMENTACAO
	@Override
	public void insert(Integer element) {
		SingleLinkedListNode<Integer> auxHead = head;
		if(head.isNIL()){
			SingleLinkedListNode<Integer> newHead = new SingleLinkedListNode<Integer>(element,head);
			head = newHead;
		}else{
			while(!auxHead.getNext().isNIL()){
				auxHead = auxHead.getNext();
			}
			SingleLinkedListNode<Integer> newNode = new SingleLinkedListNode<Integer>(element,auxHead.getNext());
			auxHead.setNext(newNode);
		}
	}

	
}
